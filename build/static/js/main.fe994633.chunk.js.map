{"version":3,"sources":["components/LocalStorage.jsx","components/Editor.jsx","App.js","index.js"],"names":["LocalStorage","key","initialValue","prefixedKey","_useState","useState","jsonValue","localStorage","getItem","JSON","parse","_useState2","_slicedToArray","Value","setValue","useEffect","setItem","stringify","Editor","props","useRef","language","logo","value","onChange","color","title","React","createElement","Fragment","className","style","display","alignItems","fontWeight","Controlled","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","App","_LocalStorage","_LocalStorage2","html","setHtml","_LocalStorage3","_LocalStorage4","css","setCss","_LocalStorage5","_LocalStorage6","js","setJs","srcDoc","setsrcDock","ref","elementRef","_useState3","winWidth","window","innerWidth","_useState4","width","setWidth","detectSize","addEventListener","removeEventListener","timeout","setTimeout","concat","clearTimeout","GrCodepen","Split","direction","minSize","AiFillHtml5","DiCss3","DiJavascript","onLoad","document","querySelector","contentWindow","overflowWrap","frameBorder","sandbox","height","ReactDOM","createRoot","getElementById","render"],"mappings":"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","file":"static/js/main.fe994633.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\nconst PREFIX = 'codepen-clone-'\r\n\r\nexport const LocalStorage = (key,initialValue) => {\r\n        const prefixedKey = PREFIX + key\r\n\r\n        const [Value, setValue] = useState(()=>{\r\n            const jsonValue = localStorage.getItem(prefixedKey)\r\n            if(jsonValue != null) return JSON.parse(jsonValue)\r\n\r\n\r\n            if(typeof initialValue === 'function'){\r\n                return initialValue()\r\n            }else{\r\n                return initialValue\r\n            }\r\n        })\r\n\r\n        useEffect(()=>{\r\n           localStorage.setItem(prefixedKey, JSON.stringify(Value))\r\n        },[prefixedKey,Value])\r\n\r\n    return [ Value ,setValue]\r\n}\r\n","import React, { useState } from \"react\";\r\n// import './editor.scss'\r\n// import \"codemirror/theme/material-ocean.css\";\r\nimport \"codemirror/theme/ayu-mirage.css\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/mode/xml/xml\";\r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport \"codemirror/mode/css/css\";\r\nimport { Controlled } from \"react-codemirror2\";\r\nimport { useRef } from \"react\";\r\n\r\n\r\nconst Editor = (props) => {\r\n  const editors = useRef();\r\n  const wrapper = useRef();\r\n  const [open, setOpen] = useState();\r\n\r\n  const { language, logo, value, onChange, color, title } = props;\r\n\r\n  function handleChange(editor, data, value) {\r\n    onChange(value);\r\n  }\r\n\r\n \r\n\r\n  return (\r\n    <>\r\n      <div className='editor-container'>\r\n        <div className=\"editor-title\" style={{ color: color , display:'flex',alignItems:'center' }}>\r\n            {logo}\r\n            <div style={{fontWeight:'500'}}>{title}</div>  \r\n        </div>\r\n        <Controlled\r\n          onBeforeChange={handleChange}\r\n          value={value}\r\n          className=\"code-mirror-wrapper \"\r\n          options={{\r\n            lineWrapping: true,\r\n            lint: true,\r\n            mode: language,\r\n            theme: \"ayu-mirage\",\r\n            lineNumbers: true,\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React, { useEffect } from \"react\";\nimport { useState, useRef } from \"react\";\nimport { LocalStorage } from \"./components/LocalStorage\";\nimport Editor from \"./components/Editor\";\nimport { AiFillHtml5 } from \"react-icons/ai\";\nimport { DiCss3, DiJavascript } from \"react-icons/di\";\nimport { GrCodepen } from \"react-icons/gr\";\nimport \"./components/editor.scss\";\nimport Split from \"react-split\";\n\nfunction App() {\n  const [html, setHtml] = LocalStorage(\"html\", \"\");\n  const [css, setCss] = LocalStorage(\"css\", \"\");\n  const [js, setJs] = LocalStorage(\"js\", \"\");\n  const [srcDoc, setsrcDock] = useState(\"\");\n  const ref = useRef();\n  const elementRef = useRef(null);\n  const [width, setWidth] = useState({\n    winWidth: window.innerWidth,\n  });\n  const detectSize = () => {\n    setWidth({\n      winWidth: window.innerWidth,\n    });\n  };\n  useEffect(() => {\n    window.addEventListener(\"resize\", detectSize);\n    return () => {\n      window.removeEventListener(\"resize\", detectSize);\n    };\n  }, [width]);\n\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setsrcDock(\n        `\n            <html>\n             <body>${html}</body>\n             <style>${css}</style>\n             <script>${js}</script>\n            </html>\n            `\n      );\n    }, 250);\n\n    return () => clearTimeout(timeout);\n  }, [html, css, js]);\n\n  function onIframe() {\n    document\n      .querySelector(\"iframe\")\n      .contentWindow.document.querySelector(\"html\").style.overflowWrap =\n      \"break-word\";\n  }\n\n  return (\n    <>\n      <header className=\"\" ref={elementRef}>\n        <GrCodepen /> <div>Codepen</div>\n      </header>\n      <Split direction=\"vertical\" minSize={40} className=\"split\" >\n        <Split className=\" pane top-pan\" >\n          <Editor\n            language=\"xml\"\n            color=\"#E96228\"\n            title=\"HTML\"\n            logo={<AiFillHtml5 />}\n            value={html}\n            onChange={setHtml}\n          ></Editor>\n          <Editor\n            language=\"css\"\n            color=\"dodgerblue\"\n            title=\"CSS\"\n            logo={<DiCss3 />}\n            value={css}\n            onChange={setCss}\n          ></Editor>\n          <Editor\n            language=\"javascript\"\n            color=\"orange\"\n            title=\"JS\"\n            logo={<DiJavascript />}\n            value={js}\n            onChange={setJs}\n          ></Editor>\n        </Split>\n        <Split className=\"pane-bottom pane \">\n          <iframe\n            onLoad={onIframe}\n            ref={ref}\n            srcDoc={srcDoc}\n            title=\"This is a unique title\"\n            frameBorder=\"0\"\n            sandbox=\"allow-scripts allow-same-origin\"\n            width=\"100%\"\n            height=\"100%\"\n          />\n        </Split>\n      </Split>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css'\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  // <React.StrictMode>\n    <App />\n  // </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}